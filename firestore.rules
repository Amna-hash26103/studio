/**
 * @fileoverview Firestore Security Rules for Femmora App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to community posts.
 *
 * Data Structure:
 * - User profiles and associated data (periods, daily logs, stats) are nested under /users/{userId}.
 * - Community posts are stored in a top-level /community_posts/{postId} collection.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user (based on Firebase Authentication UID).
 * - Users can only read/write their own profile and associated cycle data.
 * - Community posts are publicly readable but writable only by their authors.
 * - Listing of user profiles is disallowed.
 *
 * Denormalization for Authorization:
 * - The Period entity requires a userId field that must match the userId in the path.
 * - The DailyLog entity does not have a userId field, but inherits authorization from the Period document.
 * - The CommunityPost entity has an authorId field that identifies the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can read/write their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure access to a user's menstrual cycle data.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create) User can create a period entry for themselves.
     * @allow (get, update, delete) User can read/write their own period entries.
     * @deny (create) User cannot create a period entry for another user.
     * @deny (update, delete) Non-existent document cannot be updated/deleted.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/periods/{periodId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure access to daily logs within a user's period.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create, get, list, update, delete) User can manage their own daily logs within a period.
     * @deny (create) User cannot create a daily log for another user or period.
     * @principle Enforces document ownership inherited from the parent.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       allow get: if isSignedIn() && isOwner(userId);
       allow list: if false;

       allow create: if isSignedIn() && isOwner(userId);
       allow update: if isSignedIn() && isOwner(userId);
       allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure access to user stats.
     * @path /users/{userId}/stats/{statId}
     * @allow (get, update) User can read/update their own stats.
     * @deny (create, delete) User cannot create or delete their stats (managed by backend).
     * @principle Enforces document ownership for writes; restricts creation and deletion.
     */
    match /users/{userId}/stats/{statId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if false;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Secure access to community posts.
     * @path /community_posts/{postId}
     * @allow (get, list) All users can read community posts.
     * @allow (create) Authenticated users can create community posts.
     * @allow (update, delete) Only the author of the post can update or delete it.
     * @principle Public read, owner-only writes.
     */
    match /community_posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.authorId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.authorId;
    }
  }
}
/**
 * @file Firestore Security Rules for Femmora App
 * @description This ruleset enforces a user-ownership model for private data and allows public read access for community posts.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /posts/{postId}: Stores community posts, publicly readable but writable only by the post's author.
 * - /posts/{postId}/comments/{commentId}: Stores comments for a specific post, writable by any authenticated user.
 * - /users/{userId}/periods/{periodId}: Stores a user's menstrual cycle entries, accessible only to the user themselves.
 * - /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}: Stores daily logs for a specific menstrual cycle, accessible only to the user themselves.
 * - /users/{userId}/stats/{statId}: Stores computed summary statistics for a user's cycles, accessible only to the user themselves.
 * - /users/{userId}/mealLogs/{mealLogId}: Stores a user's meal log entries, accessible only to the user themselves.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Community posts are publicly readable. Only the author of a post can modify or delete it.
 * - Comments can be created by any authenticated user.
 * - User stats are private and only accessible to the user.
 * - Data consistency is enforced for user-scoped data: the userId in the path must match the userId in the document.
 * - Listing of other users' private data is disallowed.
 *
 * Denormalization for Authorization:
 * - Community posts require a `userId` field to identify the author for write permissions.
 *
 * Structural Segregation:
 * - Public community posts are stored in a top-level `/posts` collection, while private user data is nested under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @allow (get) User with UID 'user123' can read their profile at /users/user123.
     * @allow (update) User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) User with UID 'user456' cannot read the profile at /users/user123.
     * @deny (update) User with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to community posts. Publicly readable, owner-only writes.
     * @path /posts/{postId}
     * @allow (get) Any user can read a post at /posts/post123.
     * @allow (list) Any user can list posts in the /posts collection.
     * @allow (create) User with UID 'user123' can create a post at /posts/post123 if post.userId == 'user123'.
     * @allow (update) User with UID 'user123' can update their post at /posts/post123 if they are the original author.
     * @allow (delete) User with UID 'user123' can delete their post at /posts/post123 if they are the original author.
     * @deny (create) User with UID 'user456' cannot create a post at /posts/post123 with post.userId == 'user123'.
     * @deny (update) User with UID 'user456' cannot update the post at /posts/post123 if they are not the original author.
     * @deny (delete) User with UID 'user456' cannot delete the post at /posts/post123 if they are not the original author.
     * @principle Allows public read access while restricting writes to the post author.
     */
    match /posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to comments on community posts. Any authenticated user can create comments.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (create) User with UID 'user123' can create a comment at /posts/post123/comments/comment456.
     * @deny (update) No one can update a comment.
     * @deny (delete) No one can delete a comment.
     * @principle Allows any authenticated user to create comments but restricts updates and deletions.
     */
    match /posts/{postId}/comments/{commentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to a user's menstrual cycle entries.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create) User with UID 'user123' can create a period at /users/user123/periods/period456.
     * @allow (get) User with UID 'user123' can read their period at /users/user123/periods/period456.
     * @allow (update) User with UID 'user123' can update their period at /users/user123/periods/period456.
     * @allow (delete) User with UID 'user123' can delete their period at /users/user123/periods/period456.
     * @deny (create) User with UID 'user456' cannot create a period at /users/user123/periods/period456.
     * @deny (get) User with UID 'user456' cannot read the period at /users/user123/periods/period456.
     * @deny (update) User with UID 'user456' cannot update the period at /users/user123/periods/period456.
     * @deny (delete) User with UID 'user456' cannot delete the period at /users/user123/periods/period456.
     * @principle Enforces document ownership for all operations on period entries.
     */
    match /users/{userId}/periods/{periodId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to daily logs within a user's period.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create) User with UID 'user123' can create a daily log at /users/user123/periods/period456/dailyLogs/log789.
     * @allow (get) User with UID 'user123' can read their daily log at /users/user123/periods/period456/dailyLogs/log789.
     * @allow (update) User with UID 'user123' can update their daily log at /users/user123/periods/period456/dailyLogs/log789.
     * @allow (delete) User with UID 'user123' can delete their daily log at /users/user123/periods/period456/dailyLogs/log789.
     * @deny (create) User with UID 'user456' cannot create a daily log at /users/user123/periods/period456/dailyLogs/log789.
     * @deny (get) User with UID 'user456' cannot read the daily log at /users/user123/periods/period456/dailyLogs/log789.
     * @deny (update) User with UID 'user456' cannot update the daily log at /users/user123/periods/period456/dailyLogs/log789.
     * @deny (delete) User with UID 'user456' cannot delete the daily log at /users/user123/periods/period456/dailyLogs/log789.
     * @principle Enforces document ownership for all operations on daily log entries.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's cycle statistics.
     * @path /users/{userId}/stats/{statId}
     * @allow (create) User with UID 'user123' can create stats at /users/user123/stats/summary.
     * @allow (get) User with UID 'user123' can read their stats at /users/user123/stats/summary.
     * @allow (update) User with UID 'user123' can update their stats at /users/user123/stats/summary.
     * @allow (delete) User with UID 'user123' can delete their stats at /users/user123/stats/summary.
     * @deny (create) User with UID 'user456' cannot create stats at /users/user123/stats/summary.
     * @deny (get) User with UID 'user456' cannot read the stats at /users/user123/stats/summary.
     * @deny (update) User with UID 'user456' cannot update the stats at /users/user123/stats/summary.
     * @deny (delete) User with UID 'user456' cannot delete the stats at /users/user123/stats/summary.
     * @principle Enforces document ownership for all operations on user stats.
     */
    match /users/{userId}/stats/{statId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's meal logs.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create) User with UID 'user123' can create a meal log at /users/user123/mealLogs/meal123.
     * @allow (get) User with UID 'user123' can read their meal log at /users/user123/mealLogs/meal123.
     * @allow (update) User with UID 'user123' can update their meal log at /users/user123/mealLogs/meal123.
     * @allow (delete) User with UID 'user123' can delete their meal log at /users/user123/mealLogs/meal123.
     * @deny (create) User with UID 'user456' cannot create a meal log at /users/user123/mealLogs/meal123.
     * @deny (get) User with UID 'user456' cannot read the meal log at /users/user123/mealLogs/meal123.
     * @deny (update) User with UID 'user456' cannot update the meal log at /users/user123/mealLogs/meal123.
     * @deny (delete) User with UID 'user456' cannot delete the meal log at /users/user123/mealLogs/meal123.
     * @principle Enforces document ownership for all operations on meal logs.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}
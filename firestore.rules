/**
 * @file Firebase Security Rules for Femmora App
 *
 * @description This ruleset enforces a user-ownership model for private user data
 * and allows public read access to community posts with owner-only write access.
 *
 * @dataStructure
 * - /users/{userId}: User profiles, owned by the corresponding user.
 * - /users/{userId}/periods/{periodId}: Menstrual cycle entries, owned by the user.
 * - /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}: Daily logs for menstrual cycles, owned by the user.
 * - /users/{userId}/stats/{statId}: User's statistics, owned by the user. It is intended to be a singleton.
 * - /community_posts/{postId}: Community posts, publicly readable, but only writable by the author.
 * - /users/{userId}/mealLogs/{mealLogId}: Meal logs, owned by the user.
 *
 * @keySecurityDecisions
 * - Users can only read and write their own profile data and associated subcollections.
 * - Community posts are publicly readable but only the author can create, update, or delete them.
 * - Listing is allowed for all user-owned subcollections.
 * - Data consistency between the path and the document's internal user ID is enforced on creation and updates.
 * - Strict ownership is enforced for all write operations.
 *
 * @denormalizationForAuthorization
 * - Community Posts: The `authorId` field is used to enforce ownership for write operations.
 *
 * @structuralSegregation
 * - Private user data (periods, dailyLogs, stats, mealLogs) is stored under the /users/{userId} collection,
 *   while public community posts are stored in the top-level /community_posts/{postId} collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with matching {userId} can create their profile.
     * @allow (get, update, delete) - User with matching {userId} can read, update, or delete their profile.
     * @deny (create) - User trying to create a profile with an ID different from their own.
     * @deny (update, delete) - Another user attempting to modify or delete this profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's menstrual cycle entries.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create, get, list, update, delete) - User with matching {userId} can manage their own period entries.
     * @deny (create, get, list, update, delete) - Another user attempting to access or modify these period entries.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/periods/{periodId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to daily logs within a user's menstrual cycle.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create, get, list, update, delete) - User with matching {userId} can manage their own daily log entries.
     * @deny (create, get, list, update, delete) - Another user attempting to access or modify these daily log entries.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's statistics document.
     * @path /users/{userId}/stats/{statId}
     * @allow (get, create, update, delete) - User with matching {userId} can manage their own stats document.
     * @deny (get, create, update, delete) - Another user attempting to access or modify this stats document.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/stats/{statId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to community posts.
     * @path /community_posts/{postId}
     * @allow (get, list) - Anyone can read community posts.
     * @allow (create) - Only authenticated users can create community posts, with `authorId` matching their UID.
     * @allow (update, delete) - Only the author of the post can update or delete it.
     * @deny (create) - Authenticated user trying to create a post with an `authorId` different from their UID.
     * @deny (update, delete) - Another user attempting to modify or delete this post.
     * @principle Allows public read access but restricts write access to the author.
     */
    match /community_posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }
      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

     /**
     * @description Controls access to a user's meal logs.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create, get, list, update, delete) - User with matching {userId} can manage their own meal log entries.
     * @deny (create, get, list, update, delete) - Another user attempting to access or modify these meal log entries.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}
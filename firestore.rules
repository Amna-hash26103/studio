/**
 * @fileoverview Firestore Security Rules for Femmora App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to community posts.
 *
 * Data Structure:
 * - User profiles and associated data (periods, daily logs, stats, meal logs) are nested under `/users/{userId}` and are only accessible to the owning user.
 * - Community posts are stored in the top-level `/posts/{postId}` collection and are publicly readable.
 * - Comments on posts are stored in the `/posts/{postId}/comments/{commentId}` subcollection and are also publicly readable, but can only be created by signed-in users.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own profiles.
 * - Community posts are publicly readable, but only signed-in users can create them.
 * - Comments are publicly readable but can only be created by signed-in users.
 * - User stats are treated as private and are only accessible to the owning user. It's expected that only one stat document exists per user (e.g., `/users/{userId}/stats/summary`).
 * - User listing is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Community Posts: The `userId` field within each post document is used to enforce ownership for updates and deletes.
 * - Periods, DailyLogs, MealLogs and UserStats: The `userId` field within each document is used in conjunction with the path to enforce user ownership.
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access control to user profiles. Only the user can read, update, or delete their own profile. Allows self-creation.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile at /users/user123 with matching userId.
     * @allow (get) User with UID 'user123' reads their profile at /users/user123.
     * @allow (update) User with UID 'user123' updates their profile at /users/user123.
     * @allow (delete) User with UID 'user123' deletes their profile at /users/user123.
     * @deny (create) User with UID 'user456' attempts to create a profile at /users/user123.
     * @deny (get) User with UID 'user456' attempts to read profile at /users/user123.
     * @deny (update) User with UID 'user456' attempts to update profile at /users/user123.
     * @deny (delete) User with UID 'user456' attempts to delete profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isOwner(userId) && request.resource.data.email is string && request.auth.token.email == request.resource.data.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to community posts, but restricts creation, updates, and deletion to authenticated users who are the owners.
     * @path /posts/{postId}
     * @allow (get) Any user can read a post at /posts/post123.
     * @allow (list) Any user can list posts in /posts.
     * @allow (create) User with UID 'user123' creates a post at /posts/post456 with userId 'user123'.
     * @allow (update) User with UID 'user123' updates their post at /posts/post456 with userId 'user123'.
     * @allow (delete) User with UID 'user123' deletes their post at /posts/post456 with userId 'user123'.
     * @deny (create) Anonymous user attempts to create a post.
     * @deny (update) User with UID 'user456' attempts to update post at /posts/post456 with userId 'user123'.
     * @deny (delete) User with UID 'user456' attempts to delete post at /posts/post456 with userId 'user123'.
     * @principle Public read, owner-only writes.
     */
    match /posts/{postId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Grants public read access to comments, but restricts creation to authenticated users. Updates and deletes are disallowed.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (get) Any user can read a comment at /posts/post123/comments/comment456.
     * @allow (list) Any user can list comments in /posts/post123/comments.
     * @allow (create) User with UID 'user123' creates a comment at /posts/post123/comments/comment789.
     * @deny (create) Anonymous user attempts to create a comment.
     * @deny (update) Any user attempts to update a comment.
     * @deny (delete) Any user attempts to delete a comment.
     * @principle Public read, authenticated creation only.
     */
    match /posts/{postId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access control to user's period entries. Only the user can read, create, update, or delete their own period entries.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create) User with UID 'user123' creates a period entry at /users/user123/periods/period456 with matching userId.
     * @allow (get) User with UID 'user123' reads their period entry at /users/user123/periods/period456.
     * @allow (update) User with UID 'user123' updates their period entry at /users/user123/periods/period456.
     * @allow (delete) User with UID 'user123' deletes their period entry at /users/user123/periods/period456.
     * @deny (create) User with UID 'user456' attempts to create a period entry at /users/user123/periods/period456.
     * @deny (get) User with UID 'user456' attempts to read period entry at /users/user123/periods/period456.
     * @deny (update) User with UID 'user456' attempts to update period entry at /users/user123/periods/period456.
     * @deny (delete) User with UID 'user456' attempts to delete period entry at /users/user123/periods/period456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/periods/{periodId} {
      allow get, list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access control to user's daily log entries. Only the user can read, create, update, or delete their own daily log entries.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create) User with UID 'user123' creates a daily log entry at /users/user123/periods/period456/dailyLogs/dailyLog789.
     * @allow (get) User with UID 'user123' reads their daily log entry at /users/user123/periods/period456/dailyLogs/dailyLog789.
     * @allow (update) User with UID 'user123' updates their daily log entry at /users/user123/periods/period456/dailyLogs/dailyLog789.
     * @allow (delete) User with UID 'user123' deletes their daily log entry at /users/user123/periods/period456/dailyLogs/dailyLog789.
     * @deny (create) User with UID 'user456' attempts to create a daily log entry at /users/user123/periods/period456/dailyLogs/dailyLog789.
     * @deny (get) User with UID 'user456' attempts to read daily log entry at /users/user123/periods/period456/dailyLogs/dailyLog789.
     * @deny (update) User with UID 'user456' attempts to update daily log entry at /users/user123/periods/period456/dailyLogs/dailyLog789.
     * @deny (delete) User with UID 'user456' attempts to delete daily log entry at /users/user123/periods/period456/dailyLogs/dailyLog789.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      allow get, list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access control to user's stats. Only the user can read, create, update, or delete their own stats.
     * @path /users/{userId}/stats/{statId}
     * @allow (create) User with UID 'user123' creates a stats document at /users/user123/stats/summary with matching userId.
     * @allow (get) User with UID 'user123' reads their stats document at /users/user123/stats/summary.
     * @allow (update) User with UID 'user123' updates their stats document at /users/user123/stats/summary.
     * @allow (delete) User with UID 'user123' deletes their stats document at /users/user123/stats/summary.
     * @deny (create) User with UID 'user456' attempts to create a stats document at /users/user123/stats/summary.
     * @deny (get) User with UID 'user456' attempts to read stats document at /users/user123/stats/summary.
     * @deny (update) User with UID 'user456' attempts to update stats document at /users/user123/stats/summary.
     * @deny (delete) User with UID 'user456' attempts to delete stats document at /users/user123/stats/summary.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stats/{statId} {
      allow get, list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access control to user's meal log entries. Only the user can read, create, update, or delete their own meal log entries.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create) User with UID 'user123' creates a meal log entry at /users/user123/mealLogs/mealLog456 with matching userId.
     * @allow (get) User with UID 'user123' reads their meal log entry at /users/user123/mealLogs/mealLog456.
     * @allow (update) User with UID 'user123' updates their meal log entry at /users/user123/mealLogs/mealLog456.
     * @allow (delete) User with UID 'user123' deletes their meal log entry at /users/user123/mealLogs/mealLog456.
     * @deny (create) User with UID 'user456' attempts to create a meal log entry at /users/user123/mealLogs/mealLog456.
     * @deny (get) User with UID 'user456' attempts to read meal log entry at /users/user123/mealLogs/mealLog456.
     * @deny (update) User with UID 'user456' attempts to update meal log entry at /users/user123/mealLogs/mealLog456.
     * @deny (delete) User with UID 'user456' attempts to delete meal log entry at /users/user123/mealLogs/mealLog456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      allow get, list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}
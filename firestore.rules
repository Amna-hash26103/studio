/**
 * @fileoverview Firestore Security Rules for Femmora App
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and prevents unauthorized access to personal information.
 * Community posts are publicly readable, but writes are restricted to authenticated users.
 *
 * Data Structure:
 * - User profiles and associated data (periods, daily logs, stats, meal logs) are nested under /users/{userId}.
 * - Community posts and their comments are stored in top-level collections: /posts/{postId} and /posts/{postId}/comments/{commentId}.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Community posts are publicly readable (get, list), but only authenticated users can create them.
 * - Only the post owner can update or delete a post.
 * - Users can only manage (create, read, update, delete) their own periods, daily logs, stats, and meal logs.
 * - Listing of user stats is disallowed. The `get` is the only permitted operation on the singleton document.
 *
 * Denormalization for Authorization:
 * - CommunityPost documents must have a `userId` field to identify the author. This field is used to enforce ownership for updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document.
     * @principle Ensures that only the existing owner can update or delete the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that the user ID in the request matches the resource's user ID.
     */
    function requestUserIdMatchesResourceUserId() {
        return request.resource.data.userId == request.auth.uid;
    }
    
    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces user-ownership: Only the authenticated user can manage their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for community posts.
     * @path /posts/{postId}
     * @allow (get) Any authenticated user can read a post.
     * @allow (list) Any authenticated user can list posts.
     * @allow (create) Any authenticated user can create a post with their userId.
     * @allow (update) The owner of the post ('user123') can update it.
     * @allow (delete) The owner of the post ('user123') can delete it.
     * @deny (update) User with UID 'user456' cannot update a post owned by 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a post owned by 'user123'.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /posts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && requestUserIdMatchesResourceUserId();
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for comments on community posts.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (get) Any authenticated user can read a comment.
     * @allow (list) Any authenticated user can list comments.
     * @allow (create) Any authenticated user can create a comment with their userId.
     * @allow (update) The owner of the comment ('user123') can update it.
     * @allow (delete) The owner of the comment ('user123') can delete it.
     * @deny (update) User with UID 'user456' cannot update a comment owned by 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a comment owned by 'user123'.
     * @principle Restricts write access to the owner of the comment.
     */
    match /posts/{postId}/comments/{commentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && requestUserIdMatchesResourceUserId();
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for user's menstrual cycle entries (Periods).
     * @path /users/{userId}/periods/{periodId}
     * @allow (create) User with UID 'user123' can create a period under their profile.
     * @allow (get) User with UID 'user123' can read a period under their profile.
     * @allow (list) User with UID 'user123' can list periods under their profile.
     * @allow (update) User with UID 'user123' can update a period under their profile.
     * @allow (delete) User with UID 'user123' can delete a period under their profile.
     * @deny (create) User with UID 'user456' cannot create a period under user 'user123' profile.
     * @deny (update) User with UID 'user456' cannot update a period owned by user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a period owned by user 'user123'.
     * @principle Enforces user-ownership for menstrual cycle entries.
     */
    match /users/{userId}/periods/{periodId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for daily logs within a menstrual cycle.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create) User with UID 'user123' can create a daily log under their period.
     * @allow (get) User with UID 'user123' can read a daily log under their period.
     * @allow (list) User with UID 'user123' can list daily logs under their period.
     * @allow (update) User with UID 'user123' can update a daily log under their period.
     * @allow (delete) User with UID 'user123' can delete a daily log under their period.
     * @deny (create) User with UID 'user456' cannot create a daily log under user 'user123' profile.
     * @deny (update) User with UID 'user456' cannot update a daily log owned by user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a daily log owned by user 'user123'.
     * @principle Enforces user-ownership for daily logs.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user statistics.
     * @path /users/{userId}/stats/{statId}
     * @allow (get) User with UID 'user123' can read their statistics.
     * @deny (list) No one can list user stats.
     * @allow (create) User with UID 'user123' can create their statistics.
     * @allow (update) User with UID 'user123' can update their statistics.
     * @allow (delete) User with UID 'user123' can delete their statistics.
     * @deny (create) User with UID 'user456' cannot create statistics under user 'user123' profile.
     * @deny (update) User with UID 'user456' cannot update statistics owned by user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete statistics owned by user 'user123'.
     * @principle Enforces user-ownership for user statistics and disallows listing.
     */
    match /users/{userId}/stats/{statId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for meal logs.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create) User with UID 'user123' can create a meal log under their profile.
     * @allow (get) User with UID 'user123' can read a meal log under their profile.
     * @allow (list) User with UID 'user123' can list meal logs under their profile.
     * @allow (update) User with UID 'user123' can update a meal log under their profile.
     * @allow (delete) User with UID 'user123' can delete a meal log under their profile.
     * @deny (create) User with UID 'user456' cannot create a meal log under user 'user123' profile.
     * @deny (update) User with UID 'user456' cannot update a meal log owned by user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a meal log owned by user 'user123'.
     * @principle Enforces user-ownership for meal logs.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for Femmora App
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection and access control.
 * It uses a combination of ownership-based and public-read/owner-write access patterns.
 * Strict validation of user identity is enforced before granting access to any resources.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profiles, secured by owner-only access.
 * - `/posts/{postId}`: Stores community posts, publicly readable but writable only by the owner.
 * - `/posts/{postId}/comments/{commentId}`: Stores comments related to a specific post, publicly readable, writable by owner
 * - `/users/{userId}/periods/{periodId}`: Stores user's menstrual cycle entries, secured by owner-only access.
 * - `/users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}`: Stores daily logs for a specific cycle, secured by owner-only access.
 * - `/users/{userId}/stats/{statId}`: Stores computed statistics for a user, secured by owner-only access. Should be a singleton doc.
 * - `/users/{userId}/mealLogs/{mealLogId}`: Stores user's meal log entries, secured by owner-only access.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Community posts are publicly readable, but only the creator can modify or delete them.
 * - Listing all users is disallowed to protect user privacy.
 * - Data required for authorization (e.g., `userId`) is denormalized onto the documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create a profile document at /users/user123.
     * @allow (get) User with UID 'user123' can read their profile document at /users/user123.
     * @allow (update) User with UID 'user123' can update their profile document at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their profile document at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile document at /users/user123.
     * @deny (get) User with UID 'user456' cannot read the profile document at /users/user123.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read community posts, but only the owner can modify or delete.
     * @path /posts/{postId}
     * @allow (get) Any user can read a post.
     * @allow (list) Any user can list posts.
     * @allow (create) User with UID 'user123' can create a post with userId: 'user123'.
     * @allow (update) User with UID 'user123' can update a post they own.
     * @allow (delete) User with UID 'user123' can delete a post they own.
     * @deny (create) User with UID 'user123' cannot create a post with userId: 'user456'.
     * @deny (update) User with UID 'user456' cannot update a post owned by 'user123'.
     * @principle Public read, owner-only write access.
     */
    match /posts/{postId} {
      function isOwner() {
        return request.auth.uid == resource.data.userId;
      }

      function isCreatingOwner() {
        return request.auth.uid == request.resource.data.userId;
      }

      allow get: if true;
      allow list: if true;

      allow create: if request.auth != null && isCreatingOwner();
      allow update: if request.auth != null && isOwner();
      allow delete: if request.auth != null && isOwner();
    }

     /**
      * @description Allows anyone to read comments on a post. Only the author can write.
      * @path /posts/{postId}/comments/{commentId}
      * @allow (get) Any user can read a comment.
      * @allow (list) Any user can list comments for a post.
      * @allow (create) User with UID 'user123' can create a comment with userId: 'user123'.
      * @allow (update) User with UID 'user123' can update a comment they own.
      * @allow (delete) User with UID 'user123' can delete a comment they own.
      * @deny (create) User with UID 'user123' cannot create a comment with userId: 'user456'.
      * @deny (update) User with UID 'user456' cannot update a comment owned by 'user123'.
      * @principle Public read, owner-only write access.
      */
     match /posts/{postId}/comments/{commentId} {
        function isOwner() {
          return request.auth.uid == resource.data.userId;
        }

        function isCreatingOwner() {
          return request.auth.uid == request.resource.data.userId;
        }

        allow get: if true;
        allow list: if true;

        allow create: if request.auth != null && isCreatingOwner();
        allow update: if request.auth != null && isOwner();
        allow delete: if request.auth != null && isOwner();
    }

    /**
     * @description Allows a user to manage their own period entries.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create) User with UID 'user123' can create a period entry at /users/user123/periods/period1.
     * @allow (get) User with UID 'user123' can read their period entry at /users/user123/periods/period1.
     * @allow (update) User with UID 'user123' can update their period entry at /users/user123/periods/period1.
     * @allow (delete) User with UID 'user123' can delete their period entry at /users/user123/periods/period1.
     * @deny (create) User with UID 'user456' cannot create a period entry at /users/user123/periods/period1.
     * @deny (get) User with UID 'user456' cannot read the period entry at /users/user123/periods/period1.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/periods/{periodId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own daily logs for a specific period.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create) User with UID 'user123' can create a daily log entry at /users/user123/periods/period1/dailyLogs/log1.
     * @allow (get) User with UID 'user123' can read their daily log entry at /users/user123/periods/period1/dailyLogs/log1.
     * @allow (update) User with UID 'user123' can update their daily log entry at /users/user123/periods/period1/dailyLogs/log1.
     * @allow (delete) User with UID 'user123' can delete their daily log entry at /users/user123/periods/period1/dailyLogs/log1.
     * @deny (create) User with UID 'user456' cannot create a daily log entry at /users/user123/periods/period1/dailyLogs/log1.
     * @deny (get) User with UID 'user456' cannot read the daily log entry at /users/user123/periods/period1/dailyLogs/log1.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own user stats.
     * @path /users/{userId}/stats/{statId}
     * @allow (create) User with UID 'user123' can create their stats at /users/user123/stats/summary.
     * @allow (get) User with UID 'user123' can read their stats at /users/user123/stats/summary.
     * @allow (update) User with UID 'user123' can update their stats at /users/user123/stats/summary.
     * @allow (delete) User with UID 'user123' can delete their stats at /users/user123/stats/summary.
     * @deny (create) User with UID 'user456' cannot create user stats at /users/user123/stats/summary.
     * @deny (get) User with UID 'user456' cannot read the user stats at /users/user123/stats/summary.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/stats/{statId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own meal logs.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create) User with UID 'user123' can create a meal log at /users/user123/mealLogs/meal1.
     * @allow (get) User with UID 'user123' can read their meal log at /users/user123/mealLogs/meal1.
     * @allow (update) User with UID 'user123' can update their meal log at /users/user123/mealLogs/meal1.
     * @allow (delete) User with UID 'user123' can delete their meal log at /users/user123/mealLogs/meal1.
     * @deny (create) User with UID 'user456' cannot create a meal log at /users/user123/mealLogs/meal1.
     * @deny (get) User with UID 'user456' cannot read the meal log at /users/user123/mealLogs/meal1.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}
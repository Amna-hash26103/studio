/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles, period data, and meal logs.
 *              Community posts and comments are publicly readable, but modifications are restricted.
 *              User stats are also secured under user ownership.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, secured with owner-only access.
 * - /posts/{postId}: Community posts, publicly readable, write access restricted to owners, likes restricted to the post owner
 * - /posts/{postId}/comments/{commentId}: Comments on posts, publicly readable, write access restricted to owners.
 * - /users/{userId}/periods/{periodId}: User's period data, secured with owner-only access.
 * - /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}: Daily logs for periods, secured with owner-only access.
 * - /users/{userId}/stats/{statId}: User's statistics, secured with owner-only access.
 * - /users/{userId}/mealLogs/{mealLogId}: User's meal logs, secured with owner-only access.
 *
 * Key Security Decisions:
 * - User profiles and associated data (periods, daily logs, meal logs, stats) are strictly private and accessible only to the owning user.
 * - Community posts are publicly readable, allowing wide access for consumption.
 * - User listing is disallowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * - Community posts require a 'userId' field to identify the owner for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the authenticated user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the authenticated user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates a profile with userId: 'user123'.
     * @deny (create) User with UID 'user123' tries to create a profile with userId: 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.email is string && request.resource.data.username is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to community posts, allowing public reads and owner-only writes.
     * @path /posts/{postId}
     * @allow (get) Any authenticated user can read a post.
     * @allow (list) Any authenticated user can list posts.
     * @allow (create) User with UID 'user123' creates a post with userId: 'user123'.
     * @deny (create) User with UID 'user123' tries to create a post with userId: 'user456'.
     * @deny (update) User with UID 'user123' tries to update a post they don't own.
     * @principle Allows public reads and enforces document ownership for writes.
     */
    match /posts/{postId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.content is string && request.resource.data.timestamp is string;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
            allow update: if isSignedIn() && (request.resource.data.keys().hasOnly(['likes']) && resource.data.userId == request.auth.uid) ;
    }

    /**
     * @description Manages access to comments on community posts, allowing public reads and owner-only writes.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (get) Any authenticated user can read a comment.
     * @allow (list) Any authenticated user can list comments for a post.
     * @allow (create) User with UID 'user123' creates a comment with userId: 'user123'.
     * @deny (create) User with UID 'user123' tries to create a comment with userId: 'user456'.
     * @deny (update) User with UID 'user123' tries to update a comment they don't own.
     * @principle Allows public reads and enforces document ownership for writes.
     */
    match /posts/{postId}/comments/{commentId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.text is string && request.resource.data.timestamp is string;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Enforces document ownership for user-specific period data.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create) User with UID 'user123' creates a period with userId: 'user123'.
     * @deny (create) User with UID 'user123' tries to create a period with userId: 'user456'.
     * @deny (update) User with UID 'user123' tries to update a period they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/periods/{periodId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId && request.resource.data.startDate is string && request.resource.data.createdAt is string && request.resource.data.id is string;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId ;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for daily logs within a user's period data.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create) User with UID 'user123' creates a daily log within their period.
     * @deny (create) User with UID 'user123' tries to create a daily log within another user's period.
     * @deny (update) User with UID 'user123' tries to update a daily log they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.date is string && request.resource.data.id is string;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for user statistics.
     * @path /users/{userId}/stats/{statId}
     * @allow (create) User with UID 'user123' creates their own stats document.
     * @deny (create) User with UID 'user123' tries to create stats for another user.
     * @deny (update) User with UID 'user123' tries to update another user's stats.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/stats/{statId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for user's meal logs.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create) User with UID 'user123' creates a meal log with userId: 'user123'.
     * @deny (create) User with UID 'user123' tries to create a meal log with userId: 'user456'.
     * @deny (update) User with UID 'user123' tries to update a meal log they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId && request.resource.data.description is string && request.resource.data.createdAt is string && request.resource.data.id is string;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}
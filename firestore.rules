/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user-specific data while allowing public read access to community posts.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the owning user.
 * - /users/{userId}/periods/{periodId}: Stores menstrual cycle entries, accessible only to the owning user.
 * - /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}: Stores daily logs for menstrual cycles, accessible only to the owning user.
 * - /users/{userId}/stats/{statId}: Stores user statistics, accessible only to the owning user. A single statId like "summary" should be used.
 * - /community_posts/{postId}: Stores community posts with public read access and owner-only write access (create, update, delete).
 * - /users/{userId}/mealLogs/{mealLogId}: Stores meal logs, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and associated subcollections (periods, daily logs, stats, mealLogs).
 * - Community posts are publicly readable but only writable by the post's author.
 * - Listing of community posts is allowed for all users.
 *
 * Denormalization for Authorization:
 * - The `CommunityPost` entity contains an `authorId` field, enabling secure, efficient owner-only write rules without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own profile.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @deny (update, delete) - Authenticated user attempts to modify another user's profile.
     * @principle Enforces document ownership for reads and writes. Validates user ID on creation and enforces immutability on updates.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read and write their own menstrual cycle data.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create) - Authenticated user creates a period entry under their profile.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own period entries.
     * @deny (create) - Unauthenticated user attempts to create a period entry.
     * @deny (update, delete) - Authenticated user attempts to modify another user's period entries.
     * @principle Enforces document ownership for reads and writes within the user's data tree.
     */
    match /users/{userId}/periods/{periodId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read and write their own daily log data for a specific menstrual cycle.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create) - Authenticated user creates a daily log entry under their period entry.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own daily log entries.
     * @deny (create) - Unauthenticated user attempts to create a daily log entry.
     * @deny (update, delete) - Authenticated user attempts to modify another user's daily log entries.
     * @principle Enforces document ownership for reads and writes within the user's data tree.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to read and write their own computed statistics.
     * @path /users/{userId}/stats/{statId}
     * @allow (create) - Authenticated user creates their stats document.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own stats document.
     * @deny (create) - Unauthenticated user attempts to create a stats document.
     * @deny (update, delete) - Authenticated user attempts to modify another user's stats document.
     * @principle Enforces document ownership for reads and writes within the user's data tree.
     */
    match /users/{userId}/stats/{statId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to community posts and owner-only write access.
     * @path /community_posts/{postId}
     * @allow (get, list) - Any user can read or list community posts.
     * @allow (create) - Authenticated user creates a post with their user ID as the authorId.
     * @allow (update, delete) - Authenticated user updates or deletes their own post.
     * @deny (create) - Authenticated user attempts to create a post with an authorId that doesn't match their own.
     * @deny (update, delete) - Authenticated user attempts to modify or delete another user's post.
     * @principle Allows public read access with owner-only writes for community posts.
     */
    match /community_posts/{postId} {
      function isOwner(authorId) {
        return request.auth != null && request.auth.uid == authorId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update: if isOwner(resource.data.authorId) && resource != null;
      allow delete: if isOwner(resource.data.authorId) && resource != null;
    }

        /**
     * @description Allows users to read and write their own meal log data.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create) - Authenticated user creates a meal log entry under their profile.
     * @allow (get, update, delete) - Authenticated user reads, updates, or deletes their own meal log entries.
     * @deny (create) - Unauthenticated user attempts to create a meal log entry.
     * @deny (update, delete) - Authenticated user attempts to modify another user's meal log entries.
     * @principle Enforces document ownership for reads and writes within the user's data tree.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}
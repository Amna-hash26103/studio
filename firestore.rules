/**
 * @file Firestore Security Rules
 * @version 2
 * @description This ruleset enforces a strict user-ownership model for user profiles, period data, daily logs, user stats, and meal logs.
 * Community posts are publicly readable, but only the author can modify or delete them.
 * Data Structure:
 * - /users/{userId}: User profile data, owned by the user with the matching UID.
 * - /users/{userId}/periods/{periodId}: Menstrual cycle data, owned by the user.
 * - /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}: Daily log entries, owned by the user.
 * - /users/{userId}/stats/{statId}: User statistics, owned by the user. Should be a singleton document.
 * - /community_posts/{postId}: Community posts, publicly readable, owner-modifiable.
 * - /users/{userId}/mealLogs/{mealLogId}: Meal log entries, owned by the user.
 * Key Security Decisions:
 * - Users can only access their own profile data and associated subcollections.
 * - Community posts are publicly readable to facilitate community interaction.
 * - User listing is disallowed to protect user privacy.
 * - Read-only collections are not used in this data model.
 * Denormalization for Authorization:
 * - The `CommunityPost` entity includes an `authorId` field to enable owner-only write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile document at /users/user_abc if the id field matches.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, or delete their profile document at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile document at /users/user_abc.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete the profile document at /users/user_abc.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to menstrual cycle documents for a user.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create) User with UID 'user_abc' can create a period document under their profile at /users/user_abc/periods/period_1.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, list, update, or delete period documents under their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a period document under /users/user_abc/periods/period_1.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete period documents under /users/user_abc/periods/period_1.
     * @principle Enforces document ownership for writes, restricts listing to the owner, protects against unauthorized access.
     */
    match /users/{userId}/periods/{periodId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to daily log documents within a user's period.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create) User with UID 'user_abc' can create a daily log under their period at /users/user_abc/periods/period_1/dailyLogs/log_1.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, list, update, or delete daily logs under their period.
     * @deny (create) User with UID 'user_xyz' cannot create a daily log under /users/user_abc/periods/period_1/dailyLogs/log_1.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete daily logs under /users/user_abc/periods/period_1/dailyLogs/log_1.
     * @principle Enforces document ownership, restricts listing to the owner, protects against unauthorized access.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user statistics documents.
     * @path /users/{userId}/stats/{statId}
     * @allow (create) User with UID 'user_abc' can create a stats document under their profile at /users/user_abc/stats/summary.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, or delete their stats document.
     * @allow (list) User with UID 'user_abc' can list their stats documents.
     * @deny (create) User with UID 'user_xyz' cannot create a stats document under /users/user_abc/stats/summary.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete the stats document at /users/user_abc/stats/summary.
     * @principle Enforces document ownership for writes, restricts listing to the owner, protects against unauthorized access.
     */
    match /users/{userId}/stats/{statId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to community post documents.
     * @path /community_posts/{postId}
     * @allow (get, list) Any user can read or list community posts.
     * @allow (create) User with UID 'user_abc' can create a community post with authorId 'user_abc'.
     * @allow (update, delete) User with UID 'user_abc' can update or delete their own community post where authorId matches.
     * @deny (create) User with UID 'user_xyz' cannot create a community post with authorId 'user_abc'.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete a community post where the authorId is 'user_abc'.
     * @principle Allows public read access to community posts while enforcing owner-only write access.
     */
    match /community_posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to meal log documents for a user.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create) User with UID 'user_abc' can create a meal log under their profile at /users/user_abc/mealLogs/meal_1.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, list, update, or delete meal logs under their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a meal log under /users/user_abc/mealLogs/meal_1.
     * @deny (update, delete) User with UID 'user_xyz' cannot update or delete meal logs under /users/user_abc/mealLogs/meal_1.
     * @principle Enforces document ownership, restricts listing to the owner, protects against unauthorized access.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}
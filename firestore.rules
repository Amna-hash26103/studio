/**
 * @file Firebase Security Rules for Femmora App
 * @description This ruleset enforces a strict user-ownership model for personal data,
 * allowing users to manage their profiles, period entries, daily logs, meal logs, and stats.
 * Community posts are publicly readable, but only authors can modify or delete them.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/periods/{periodId}: Menstrual cycle entries, accessible only to the owning user.
 * - /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}: Daily logs, accessible only to the owning user.
 * - /users/{userId}/stats/{statId}: User statistics, accessible only to the owning user. Should be a singleton document.
 * - /community_posts/{postId}: Community posts, publicly readable but writable only by the author.
 * - /users/{userId}/mealLogs/{mealLogId}: Meal logs, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Ambiguous relationships default to owner-only access.
 * - Community posts are publicly readable to encourage engagement.
 *
 * Denormalization for Authorization:
 * - CommunityPost documents denormalize authorId to allow for simple owner-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create, update, get, delete) User with UID 'user123' can create/update/get/delete their own profile at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (update, delete) User with UID 'user456' cannot update/delete the profile at /users/user123.
     * @deny (list) Listing all users is not permitted.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Only signed-in users can attempt to access user profiles.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects menstrual cycle entries, allowing only the owner to read and write.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create, update, get, delete, list) User with UID 'user123' can create/update/get/delete/list their own period entries under /users/user123/periods.
     * @deny (create) User with UID 'user456' cannot create a period entry under /users/user123/periods.
     * @deny (update, delete) User with UID 'user456' cannot update/delete period entries under /users/user123/periods.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/periods/{periodId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects daily logs, allowing only the owner to read and write.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create, update, get, delete, list) User with UID 'user123' can create/update/get/delete/list their own daily logs under /users/user123/periods/{periodId}/dailyLogs.
     * @deny (create) User with UID 'user456' cannot create a daily log under /users/user123/periods/{periodId}/dailyLogs.
     * @deny (update, delete) User with UID 'user456' cannot update/delete daily logs under /users/user123/periods/{periodId}/dailyLogs.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects user statistics, allowing only the owner to read and write.
     * @path /users/{userId}/stats/{statId}
     * @allow (create, update, get, delete, list) User with UID 'user123' can create/update/get/delete/list their own stats under /users/user123/stats.
     * @deny (create) User with UID 'user456' cannot create stats under /users/user123/stats.
     * @deny (update, delete) User with UID 'user456' cannot update/delete stats under /users/user123/stats.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stats/{statId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects community posts, allowing public read access but restricting writes to the author.
     * @path /community_posts/{postId}
     * @allow (get, list) Any user can read/list community posts.
     * @allow (create) User with UID 'user123' can create a community post with authorId: 'user123'.
     * @allow (update, delete) User with UID 'user123' can update/delete their own community post where resource.data.authorId == 'user123'.
     * @deny (create) User with UID 'user456' cannot create a community post with authorId: 'user123'.
     * @deny (update, delete) User with UID 'user456' cannot update/delete the community post where resource.data.authorId == 'user123'.
     * @principle Allows public read access with owner-only writes for community posts.
     */
    match /community_posts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Protects meal logs, allowing only the owner to read and write.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create, update, get, delete, list) User with UID 'user123' can create/update/get/delete/list their own meal logs under /users/user123/mealLogs.
     * @deny (create) User with UID 'user456' cannot create a meal log under /users/user123/mealLogs.
     * @deny (update, delete) User with UID 'user456' cannot update/delete meal logs under /users/user123/mealLogs.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper Functions ---

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the requesting user is the owner of the document based on the provided userId.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    //Check if the requesting user is the owner of the document AND if the document exists
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}
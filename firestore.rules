rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for profile data. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}/profile
     * @allow (get, create, update, delete): Authenticated user with UID matching the 'userId' path parameter.
     * @deny (get, create, update, delete): Any other user, or an unauthenticated request.
     * @principle Enforces document ownership for all operations.  Validates relational integrity by ensuring the 'id' field matches the 'userId' path.
     */
    match /users/{userId}/profile {
      // Define helper function to check if the request is made by the owner
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow read access to the owner
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow the owner to create their profile, enforcing that the 'id' field matches the 'userId' path.
      allow create: if isOwner(userId);

      // Allow the owner to update their profile, enforcing immutability of the 'id' field.
      allow update: if isOwner(userId);

      // Allow the owner to delete their profile.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for project data. Only the authenticated user (owner) can read, create, update and delete their own projects.
     * @path /users/{userId}/projects/{projectId}
     * @allow (get, create, update, delete): Authenticated user with UID matching the 'userId' path parameter.
     * @deny (get, create, update, delete): Any other user, or an unauthenticated request.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/projects/{projectId} {
      // Define helper function to check if the request is made by the owner
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow read access to the owner
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow the owner to create a project
      allow create: if isOwner(userId);

      // Allow the owner to update their project
      allow update: if isOwner(userId);

      // Allow the owner to delete their project
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to community posts based on a membership model. Allows read access to all. Allows write access to members.
     * @path /community_posts/{postId}
     * @allow (get, list): Any user can read/list community posts.
     * @allow (create, update, delete): Only members of the post can create, update or delete.
     * @deny (create, update, delete): Non-members of the post.
     * @principle Enforces a shared access model for collaborative content.
     */
    match /community_posts/{postId} {
      // Define helper function to check if the user is a member
      function isMember() {
        return request.auth != null && request.auth.uid != null && 'members' in request.resource.data && request.auth.uid in request.resource.data.members;
      }

      function isExistingMember() {
          return request.auth != null && request.auth.uid != null && resource.data != null && 'members' in resource.data && request.auth.uid in resource.data.members;
      }

      // Allow read access to all users
      allow get: if true;
      allow list: if true;

      // Allow members to create a post
      allow create: if request.auth != null; // Any logged in user can create a post.

      // Allow members to update the post
      allow update: if isExistingMember();

      // Allow members to delete the post
      allow delete: if isExistingMember();
    }

    /**
     * @description Controls access to chat messages. Access is based on membership, determined by the 'members' map.
     * @path /chat_messages/{messageId}
     * @allow (get, list): Any member of the chat can read/list messages.
     * @allow (create): Any member of the chat can create a message.
     * @allow (update, delete): Only the owner of the message can update/delete it.
     * @deny (get, list, create, update, delete): Non-members of the chat.
     * @principle Enforces a shared access model for chat content.
     */
    match /chat_messages/{messageId} {
      // Define helper function to check if the user is a member
      function isMember() {
        return request.auth != null && request.auth.uid != null && 'members' in request.resource.data && request.auth.uid in request.resource.data.members;
      }

      function isExistingMember() {
        return request.auth != null && request.auth.uid != null && resource.data != null && 'members' in resource.data && request.auth.uid in resource.data.members;
      }

      // Allow read access to members
      allow get: if isMember();
      allow list: if isMember();

      // Allow members to create a message
      allow create: if request.auth != null;

      // Allow members to update the message
      allow update: if isExistingMember();

      // Allow members to delete the message
      allow delete: if isExistingMember();
    }
  }
}
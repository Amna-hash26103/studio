/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user-specific data while allowing public read access to community posts.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /users/{userId}/periods/{periodId}: Stores menstrual cycle entries, accessible only to the user.
 * - /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}: Stores daily logs for menstrual cycles, accessible only to the user.
 * - /users/{userId}/stats/{statId}: Stores user statistics, accessible only to the user.  It's expected that a singleton document (e.g., /users/{userId}/stats/summary) will exist.
 * - /community_posts/{postId}: Stores community posts, publicly readable but writable only by the author.
 * - /users/{userId}/mealLogs/{mealLogId}: Stores meal logs for a user, only accessible by the user.
 *
 * Key Security Decisions:
 * - User data (profiles, periods, daily logs, stats, mealLogs) is strictly controlled by user ownership.  No listing of other users' data is permitted.
 * - Community posts are publicly readable but can only be created, updated, or deleted by their authors.
 * - The rules do NOT enforce schema validation beyond requiring certain fields for authorization. This allows for rapid data model iteration.
 *
 * Denormalization for Authorization:
 * - The `CommunityPost` entity requires an `authorId` field to enforce owner-only writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User 'n0EwaocXX1Z7trXrORmlsTovZxT2' can create their own profile if request.auth.uid == userId.
     * @allow (get, update, delete) User 'n0EwaocXX1Z7trXrORmlsTovZxT2' can read/write their profile.
     * @deny (create) User 'n0EwaocXX1Z7trXrORmlsTovZxT2' cannot create a profile for another user.
     * @deny (get, update, delete) User 'randomId' cannot read/write User 'n0EwaocXX1Z7trXrORmlsTovZxT2' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to menstrual cycle entries for a user.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create, get, update, delete) User 'n0EwaocXX1Z7trXrORmlsTovZxT2' can manage their own periods.
     * @deny (create, get, update, delete) User 'randomId' cannot manage User 'n0EwaocXX1Z7trXrORmlsTovZxT2' periods.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/periods/{periodId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to daily logs within a menstrual cycle.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create, get, update, delete) User 'n0EwaocXX1Z7trXrORmlsTovZxT2' can manage their own daily logs.
     * @deny (create, get, update, delete) User 'randomId' cannot manage User 'n0EwaocXX1Z7trXrORmlsTovZxT2' daily logs.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user statistics.
     * @path /users/{userId}/stats/{statId}
     * @allow (create, get, update, delete) User 'n0EwaocXX1Z7trXrORmlsTovZxT2' can manage their own stats.
     * @deny (create, get, update, delete) User 'randomId' cannot manage User 'n0EwaocXX1Z7trXrORmlsTovZxT2' stats.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/stats/{statId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to community posts.  Publicly readable, owner-only writes.
     * @path /community_posts/{postId}
     * @allow (get, list) Any user can read community posts.
     * @allow (create) User 'n0EwaocXX1Z7trXrORmlsTovZxT2' can create a post if they are the author.
     * @allow (update, delete) User 'n0EwaocXX1Z7trXrORmlsTovZxT2' can modify a post if they are the author.
     * @deny (create, update, delete) User 'randomId' cannot modify User 'n0EwaocXX1Z7trXrORmlsTovZxT2' post.
     * @principle Allows public reads with owner-only writes, enforced through the `authorId` field.
     */
    match /community_posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }
      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to meal logs for a user.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create, get, update, delete) User 'n0EwaocXX1Z7trXrORmlsTovZxT2' can manage their own meal logs.
     * @deny (create, get, update, delete) User 'randomId' cannot manage User 'n0EwaocXX1Z7trXrORmlsTovZxT2' meal logs.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for Femmora app.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for personal data
 * (profiles, periods, daily logs, user stats, and meal logs). Community posts
 * are publicly readable but writable only by their respective authors.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /users/{userId}/periods/{periodId}: Menstrual cycle data, accessible only to the owning user.
 * - /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}: Daily logs for cycles, accessible only to the owning user.
 * - /users/{userId}/stats/{statId}: User statistics, accessible only to the owning user.
 * - /community_posts/{postId}: Community posts, publicly readable but author-owned for writes.
 * - /users/{userId}/mealLogs/{mealLogId}: Meal logs, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - The 'id' field in documents under /users/{userId} must match the {userId} path segment upon creation.
 * - Public read access is granted for community posts.
 *
 * Denormalization for Authorization:
 *  - The community post documents will have an `authorId` field so the `isOwner` check can be performed on those documents, as well as the `userId` on the MealLog and Period documents to prevent extra reads.
 *
 * Structural Segregation:
 *  - Public community posts and private user data are stored in separate top-level collections for simpler and more performant rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for most operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the resource data's 'authorId' field, and confirms the document exists
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user ownership and prevents operations on non-existent documents.
     */
    function isExistingOwner(authorId) {
      return isSignedIn() && request.auth.uid == authorId && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'n0EwaocXX1Z7trXrORmlsTovZxT2' can create a profile document where userId == 'n0EwaocXX1Z7trXrORmlsTovZxT2'.
     * @deny (create) User with UID 'n0EwaocXX1Z7trXrORmlsTovZxT2' cannot create a profile document where userId != 'n0EwaocXX1Z7trXrORmlsTovZxT2'.
     * @allow (get) User with UID 'n0EwaocXX1Z7trXrORmlsTovZxT2' can get their own profile.
     * @deny (get) User with UID 'randomID' cannot get the profile of user 'n0EwaocXX1Z7trXrORmlsTovZxT2'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for a user's menstrual cycle entries.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create) User with UID 'n0EwaocXX1Z7trXrORmlsTovZxT2' can create a period document under their user ID.
     * @deny (create) User with UID 'randomID' cannot create a period document under user 'n0EwaocXX1Z7trXrORmlsTovZxT2'.
     * @allow (get) User with UID 'n0EwaocXX1Z7trXrORmlsTovZxT2' can get their own period documents.
     * @deny (get) User with UID 'randomID' cannot get period documents of user 'n0EwaocXX1Z7trXrORmlsTovZxT2'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/periods/{periodId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for daily logs within a specific menstrual cycle.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create) User with UID 'n0EwaocXX1Z7trXrORmlsTovZxT2' can create a daily log document under their period document.
     * @deny (create) User with UID 'randomID' cannot create a daily log document under user 'n0EwaocXX1Z7trXrORmlsTovZxT2'.
     * @allow (get) User with UID 'n0EwaocXX1Z7trXrORmlsTovZxT2' can get their own daily log documents.
     * @deny (get) User with UID 'randomID' cannot get daily log documents of user 'n0EwaocXX1Z7trXrORmlsTovZxT2'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user statistics.
     * @path /users/{userId}/stats/{statId}
     * @allow (create) User with UID 'n0EwaocXX1Z7trXrORmlsTovZxT2' can create a stats document under their user ID.
     * @deny (create) User with UID 'randomID' cannot create a stats document under user 'n0EwaocXX1Z7trXrORmlsTovZxT2'.
     * @allow (get) User with UID 'n0EwaocXX1Z7trXrORmlsTovZxT2' can get their own stats documents.
     * @deny (get) User with UID 'randomID' cannot get stats documents of user 'n0EwaocXX1Z7trXrORmlsTovZxT2'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/stats/{statId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing user stats is not allowed.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for community posts.
     * @path /community_posts/{postId}
     * @allow (create) User with UID 'n0EwaocXX1Z7trXrORmlsTovZxT2' can create a post if request.auth.uid == request.resource.data.authorId.
     * @deny (create) User with UID 'randomID' cannot create a post with authorId 'n0EwaocXX1Z7trXrORmlsTovZxT2'.
     * @allow (get) Any user can read community posts.
     * @deny (update) User with UID 'randomID' cannot update post authored by 'n0EwaocXX1Z7trXrORmlsTovZxT2'.
     * @principle Public read access with owner-only writes.
     */
    match /community_posts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

     /**
      * @description Rules for a user's meal log entries.
      * @path /users/{userId}/mealLogs/{mealLogId}
      * @allow (create) User with UID 'n0EwaocXX1Z7trXrORmlsTovZxT2' can create a mealLog document under their user ID.
      * @deny (create) User with UID 'randomID' cannot create a mealLog document under user 'n0EwaocXX1Z7trXrORmlsTovZxT2'.
      * @allow (get) User with UID 'n0EwaocXX1Z7trXrORmlsTovZxT2' can get their own mealLog documents.
      * @deny (get) User with UID 'randomID' cannot get mealLog documents of user 'n0EwaocXX1Z7trXrORmlsTovZxT2'.
      * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
      */
    match /users/{userId}/mealLogs/{mealLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}
/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for the Femmora app's Firestore database.
 *
 * Core Philosophy:
 * The ruleset employs a combination of user-based ownership and public read access for community posts.
 * User profiles and associated data (periods, daily logs, stats, meal logs) are strictly limited to the owning user.
 * Community posts and comments are readable by all authenticated users, while creation, updates, and deletions are restricted to the owner.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user.
 * - /posts/{postId}: Community posts, publicly readable but owner-writeable.
 * - /posts/{postId}/comments/{commentId}: Comments on community posts, readable by all authenticated users, owner-writeable.
 * - /users/{userId}/periods/{periodId}: Menstrual cycle data, accessible only to the user.
 * - /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}: Daily log entries, accessible only to the user.
 * - /users/{userId}/stats/{statId}: User statistics, accessible only to the user.
 * - /users/{userId}/mealLogs/{mealLogId}: Meal log entries, accessible only to the user.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Community posts are publicly readable to allow discovery and engagement.
 * - Data validation is relaxed to allow rapid prototyping, with a focus on ownership and relationship integrity.
 * - User listing is disabled.
 *
 * Denormalization for Authorization:
 * - Community posts are required to have a `userId` field indicating the author. This is enforced on creation and used for write access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} - True if the user is the owner, false otherwise.
     * @example isOwner('someUserId') will return true if request.auth.uid == 'someUserId'.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} - True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile document at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile document at /users/user456.
     * @allow (get) User with UID 'user123' can read their profile document at /users/user123.
     * @deny (get) User with UID 'user123' cannot read profile document at /users/user456.
     * @allow (update) User with UID 'user123' can update their profile document at /users/user123.
     * @deny (update) User with UID 'user123' cannot update profile document at /users/user456.
     * @allow (delete) User with UID 'user123' can delete their profile document at /users/user123.
     * @deny (delete) User with UID 'user123' cannot delete profile document at /users/user456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access control for community posts.
     * @path /posts/{postId}
     * @allow (create) User with UID 'user123' can create a post with userId: 'user123'.
     * @deny (create) User with UID 'user123' cannot create a post with userId: 'user456'.
     * @allow (get) Any signed-in user can read a post.
     * @allow (list) Any signed-in user can list posts.
     * @allow (update) User with UID 'user123' can update their own post.
     * @deny (update) User with UID 'user123' cannot update a post they don't own.
     * @allow (delete) User with UID 'user123' can delete their own post.
     * @deny (delete) User with UID 'user123' cannot delete a post they don't own.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /posts/{postId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Defines access control for comments on community posts.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (create) User with UID 'user123' can create a comment on a post.
     * @allow (get) Any signed-in user can read a comment.
     * @allow (list) Any signed-in user can list comments.
     * @allow (update) User with UID 'user123' can update their own comment.
     * @deny (update) User with UID 'user123' cannot update a comment they don't own.
     * @allow (delete) User with UID 'user123' can delete their own comment.
     * @deny (delete) User with UID 'user123' cannot delete a comment they don't own.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /posts/{postId}/comments/{commentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Defines access control for user period data.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create) User with UID 'user123' can create period data at /users/user123/periods/period1.
     * @deny (create) User with UID 'user123' cannot create period data at /users/user456/periods/period1.
     * @allow (get) User with UID 'user123' can read period data at /users/user123/periods/period1.
     * @deny (get) User with UID 'user123' cannot read period data at /users/user456/periods/period1.
     * @allow (update) User with UID 'user123' can update period data at /users/user123/periods/period1.
     * @deny (update) User with UID 'user123' cannot update period data at /users/user456/periods/period1.
     * @allow (delete) User with UID 'user123' can delete period data at /users/user123/periods/period1.
     * @deny (delete) User with UID 'user123' cannot delete period data at /users/user456/periods/period1.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/periods/{periodId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access control for daily logs within a user's period.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create) User with UID 'user123' can create a daily log at /users/user123/periods/period1/dailyLogs/log1.
     * @deny (create) User with UID 'user123' cannot create a daily log at /users/user456/periods/period1/dailyLogs/log1.
     * @allow (get) User with UID 'user123' can read a daily log at /users/user123/periods/period1/dailyLogs/log1.
     * @deny (get) User with UID 'user123' cannot read a daily log at /users/user456/periods/period1/dailyLogs/log1.
     * @allow (update) User with UID 'user123' can update a daily log at /users/user123/periods/period1/dailyLogs/log1.
     * @deny (update) User with UID 'user123' cannot update a daily log at /users/user456/periods/period1/dailyLogs/log1.
     * @allow (delete) User with UID 'user123' can delete a daily log at /users/user123/periods/period1/dailyLogs/log1.
     * @deny (delete) User with UID 'user123' cannot delete a daily log at /users/user456/periods/period1/dailyLogs/log1.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access control for user statistics.
     * @path /users/{userId}/stats/{statId}
     * @allow (create) User with UID 'user123' can create stats at /users/user123/stats/summary.
     * @deny (create) User with UID 'user123' cannot create stats at /users/user456/stats/summary.
     * @allow (get) User with UID 'user123' can read stats at /users/user123/stats/summary.
     * @deny (get) User with UID 'user123' cannot read stats at /users/user456/stats/summary.
     * @allow (update) User with UID 'user123' can update stats at /users/user123/stats/summary.
     * @deny (update) User with UID 'user123' cannot update stats at /users/user456/stats/summary.
     * @allow (delete) User with UID 'user123' can delete stats at /users/user123/stats/summary.
     * @deny (delete) User with UID 'user123' cannot delete stats at /users/user456/stats/summary.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/stats/{statId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access control for user meal logs.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create) User with UID 'user123' can create a meal log at /users/user123/mealLogs/meal1.
     * @deny (create) User with UID 'user123' cannot create a meal log at /users/user456/mealLogs/meal1.
     * @allow (get) User with UID 'user123' can read a meal log at /users/user123/mealLogs/meal1.
     * @deny (get) User with UID 'user123' cannot read a meal log at /users/user456/mealLogs/meal1.
     * @allow (update) User with UID 'user123' can update a meal log at /users/user123/mealLogs/meal1.
     * @deny (update) User with UID 'user123' cannot update a meal log at /users/user456/mealLogs/meal1.
     * @allow (delete) User with UID 'user123' can delete a meal log at /users/user123/mealLogs/meal1.
     * @deny (delete) User with UID 'user123' cannot delete a meal log at /users/user456/mealLogs/meal1.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}
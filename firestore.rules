/**
 * @file Firebase Security Rules for the period-tracker application.
 *
 * @description This ruleset enforces a strict user-ownership model for personal data
 *  (periods, daily logs, meal logs, and user stats). Users can only read and write their own data.
 *  Posts and Comments have more open read access, but write access is still controlled via ownership.
 *
 *  Data Structure:
 *  - /users/{userId}: Stores public user profile information.
 *  - /users/{userId}/periods/{periodId}: Stores a user's menstrual cycle entries.
 *  - /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}: Stores daily logs for a specific menstrual cycle.
 *  - /users/{userId}/stats/{statId}: Stores computed summary statistics for a user's cycles (singleton document).
 *  - /users/{userId}/mealLogs/{mealLogId}: Stores a user's meal log entries.
 *  - /posts/{postId}: Stores all posts for the community feed.
 *  - /posts/{postId}/comments/{commentId}: Stores comments for a specific post.
 *
 *  Key Security Decisions:
 *  - User listing is disallowed.
 *  - Public read access is granted for posts and comments.
 *  - All write operations require a verified user identity (request.auth != null).
 *  - Missing schema validation: This ruleset skips most data validation for rapid prototyping. It only validates fields critical for authorization.
 *  - Denormalization for Posts and Comments: The `userProfile` data is denormalized in the `Post` and `Comment` entities. This facilitates displaying basic author information without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the resource's userId.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for user profile documents. Users can only read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User 'test_user' with matching {userId} can create their profile.
     * @allow (get) User 'test_user' can read their own profile.
     * @allow (update) User 'test_user' can update their profile.
     * @allow (delete) User 'test_user' can delete their own profile.
     * @deny (create) User 'another_user' cannot create a profile using 'test_user' id.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for a user's periods. Only the user can read/write their own period data.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create) User 'test_user' can create a period under their user ID.
     * @allow (get) User 'test_user' can read a period under their user ID.
     * @allow (update) User 'test_user' can update a period under their user ID.
     * @allow (delete) User 'test_user' can delete a period under their user ID.
     * @deny (create) User 'another_user' cannot create a period under 'test_user's user ID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/periods/{periodId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for daily logs within a period. Only the user can read/write their own daily log data.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create) User 'test_user' can create a daily log under their period.
     * @allow (get) User 'test_user' can read a daily log under their period.
     * @allow (update) User 'test_user' can update a daily log under their period.
     * @allow (delete) User 'test_user' can delete a daily log under their period.
     * @deny (create) User 'another_user' cannot create a daily log under 'test_user's period.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user stats. Only the user can read/write their own stats data.
     * @path /users/{userId}/stats/{statId}
     * @allow (create) User 'test_user' can create stats under their user ID.
     * @allow (get) User 'test_user' can read stats under their user ID.
     * @allow (update) User 'test_user' can update stats under their user ID.
     * @allow (delete) User 'test_user' can delete stats under their user ID.
     * @deny (create) User 'another_user' cannot create stats under 'test_user's user ID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data, validates relational integrity between documents.
     */
    match /users/{userId}/stats/{statId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for meal logs. Only the user can read/write their own meal log data.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create) User 'test_user' can create a meal log under their user ID.
     * @allow (get) User 'test_user' can read a meal log under their user ID.
     * @allow (update) User 'test_user' can update a meal log under their user ID.
     * @allow (delete) User 'test_user' can delete a meal log under their user ID.
     * @deny (create) User 'another_user' cannot create a meal log under 'test_user's user ID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data, validates relational integrity between documents.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for posts. All users can read posts, but only the owner can create, update, or delete.
     * @path /posts/{postId}
     * @allow (get) Any user can read a post.
     * @allow (list) Any user can list posts.
     * @allow (create) User 'test_user' can create a post with their user ID.
     * @allow (update) User 'test_user' can update a post with their user ID.
     * @allow (delete) User 'test_user' can delete a post with their user ID.
     * @deny (create) User 'another_user' cannot create a post using 'test_user' id.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /posts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Rules for comments. All users can read comments, but only the owner can create. Updates/deletes are disallowed.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (get) Any user can read a comment.
     * @allow (list) Any user can list comments.
     * @allow (create) User 'test_user' can create a comment.
     * @deny (update) No updates allowed to comments.
     * @deny (delete) No deletes allowed to comments.
     * @principle Allows public read access but enforces ownership for creates and disallows updates/deletes.
     */
    match /posts/{postId}/comments/{commentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}
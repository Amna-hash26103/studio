/**
 * @fileoverview Firestore Security Rules for Femmora Period Tracker.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for period tracking data,
 * while allowing public read access to community posts. User data is organized
 * under their respective user ID, ensuring privacy. Community posts are publicly
 * readable but writable only by authenticated users with a valid author ID.
 *
 * Data Structure:
 * - /users/{userId}: User profile data.
 * - /users/{userId}/periods/{periodId}: Menstrual cycle data for a user.
 * - /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}: Daily log entries for a specific cycle.
 * - /users/{userId}/stats/{statId}: User's period tracking statistics (singleton document).
 * - /community_posts/{postId}: Public community posts.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Period, DailyLog, and UserStats data are strictly user-owned.
 * - Community posts are publicly readable but require authentication to create, update, or delete.
 * - Data validation is minimized in the prototyping phase to allow rapid iteration. Authorization checks
 *   focus on user identity and relational integrity (e.g., userId in the path matches the document).
 *
 * Denormalization for Authorization:
 * - The 'Period', 'DailyLog', and 'UserStats' documents are secured by requiring that the 'userId'
 *   field within each document matches the 'userId' in the path. This avoids costly `get()` calls
 *   to the user's profile.
 * - Community posts enforce ownership via the 'authorId' field.
 *
 * Structural Segregation:
 * - Private user data (periods, logs, stats) is stored under the /users/{userId} collection,
 *   separate from the public /community_posts collection. This ensures that list operations on
 *   community posts do not expose private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can read/update/delete their profile if the userId matches their auth UID.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (get, update, delete) - If the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to period documents. Only the user can read/write their own period data.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create) - Authenticated user can create a period document under their userId.
     * @allow (get, update, delete) - Authenticated user can read/update/delete a period document under their userId.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (get, update, delete) - If the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for period data.
     */
    match /users/{userId}/periods/{periodId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to daily log documents. Only the user can read/write their own daily log data.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create) - Authenticated user can create a daily log document under their userId and periodId.
     * @allow (get, update, delete) - Authenticated user can read/update/delete a daily log document under their userId and periodId.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (get, update, delete) - If the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for daily log data.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user stats document. Only the user can read/write their own stats.
     * @path /users/{userId}/stats/{statId}
     * @allow (create) - Authenticated user can create a stats document under their userId.
     * @allow (get, update, delete) - Authenticated user can read/update/delete a stats document under their userId.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (get, update, delete) - If the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for user stats data.
     */
    match /users/{userId}/stats/{statId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to community posts. Anyone can read, but only authenticated users can create, update, or delete.
     * @path /community_posts/{postId}
     * @allow (get, list) - Anyone can read or list community posts.
     * @allow (create) - Authenticated users can create posts if the authorId matches their UID.
     * @allow (update, delete) - Authenticated users can update/delete their own posts.
     * @deny (create) - If authorId does not match the authenticated user's UID.
     * @deny (update, delete) - If the authorId does not match the authenticated user's UID, or if the post doesn't exist.
     * @principle Allows public read access to community posts, but restricts write access to owners.
     */
    match /community_posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the existing owner of the resource, and the resource exists.
  function isExistingOwner(ownerId) {
    return isSignedIn() && request.auth.uid == ownerId && resource != null;
  }
}
/**
 * @fileoverview Firestore Security Rules for the Femmora app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data
 * (profiles, periods, daily logs, stats, and meal logs). Community posts and comments
 * are publicly readable but writable only by authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the corresponding user.
 * - /posts/{postId}: Community posts, publicly readable.
 * - /posts/{postId}/comments/{commentId}: Comments on community posts.
 * - /users/{userId}/periods/{periodId}: Menstrual cycle entries, owned by the user.
 * - /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}: Daily logs, owned by the user.
 * - /users/{userId}/stats/{statId}: User statistics, owned by the user (singleton).
 * - /users/{userId}/mealLogs/{mealLogId}: Meal logs, owned by the user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Community posts are publicly readable, but creation is restricted to authenticated users.
 * - Comments can be created by authenticated users, but not updated or deleted.
 * - Period data, daily logs, user stats, and meal logs are strictly user-owned.
 * - Listing of posts is public.
 * - Listing of other user's private data is not allowed.
 *
 * Denormalization for Authorization:
 *  - Community posts require a `userId` field to enforce ownership for updates/deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc.
     * @deny (create) User with UID 'user_def' cannot create a profile at /users/user_abc.
     * @allow (get, update, delete) User with UID 'user_abc' can read/update/delete their own profile at /users/user_abc.
     * @deny (get, update, delete) User with UID 'user_def' cannot read/update/delete the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing of user profiles.
      allow create: if isOwner(userId) && request.resource.data.email is string && request.resource.data.username is string && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures community posts, allowing public reads but owner-only writes.
     * @path /posts/{postId}
     * @allow (get, list) Any authenticated or unauthenticated user can read all posts.
     * @allow (create) Authenticated user 'user_abc' can create a post with authorId: 'user_abc'.
     * @deny (create) Authenticated user 'user_abc' cannot create a post with authorId: 'user_def'.
     * @allow (update, delete) Authenticated user 'user_abc' can update/delete their own post (where resource.data.userId == 'user_abc').
     * @deny (update, delete) Authenticated user 'user_def' cannot update/delete a post where resource.data.userId == 'user_abc'.
     * @principle Public read with owner-only writes, enforces ownership on write operations.
     */
    match /posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.content is string && request.resource.data.timestamp is string;
      allow update: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Secures comments on community posts, allowing authenticated users to create comments.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (get, list) Any user can read all comments.
     * @allow (create) Authenticated user 'user_abc' can create a comment.
     * @deny (update, delete) No one can update or delete a comment.
     * @principle Authenticated users can create, but updates/deletes are disallowed.
     */
    match /posts/{postId}/comments/{commentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.text is string && request.resource.data.timestamp is string;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures user's menstrual cycle entries.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create, get, update, delete) User with UID 'user_abc' can manage their own period entries at /users/user_abc/periods/{periodId}.
     * @deny (create, get, update, delete) User with UID 'user_def' cannot manage period entries at /users/user_abc/periods/{periodId}.
     *  @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/periods/{periodId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId && request.resource.data.startDate is string && request.resource.data.createdAt is string;
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures daily logs for a specific menstrual cycle.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create, get, update, delete) User with UID 'user_abc' can manage their own daily logs.
     * @deny (create, get, update, delete) User with UID 'user_def' cannot manage daily logs for user 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.date is string;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures user's computed summary statistics for cycles.
     * @path /users/{userId}/stats/{statId}
     * @allow (create, get, update, delete) User with UID 'user_abc' can manage their own stats.
     * @deny (create, get, update, delete) User with UID 'user_def' cannot manage stats for user 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/stats/{statId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing of stats.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures user's meal log entries.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create, get, update, delete) User with UID 'user_abc' can manage their own meal logs.
     * @deny (create, get, update, delete) User with UID 'user_def' cannot manage meal logs for user 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId && request.resource.data.description is string && request.resource.data.createdAt is string;
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}
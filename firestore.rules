/**
 * @fileoverview Firestore Security Rules for Femmora App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to community posts.
 *
 * Data Structure:
 * - User profiles and associated data (periods, daily logs, stats) are nested under /users/{userId}.
 * - Community posts are stored in a top-level /community_posts/{postId} collection.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user (based on Firebase Authentication UID).
 * - Users can only read and write their own profile data and associated subcollections.
 * - Community posts are publicly readable, but only the author can modify or delete them.
 * - Listing user collections (e.g., all users) is disallowed for privacy reasons.
 * - Data validation is minimized in the prototyping phase to allow for rapid iteration.
 *
 * Denormalization for Authorization:
 * - User-specific documents (periods, daily logs) require a `userId` field that must match the UID in the path.
 * - Community posts require an `authorId` field that must match the UID of the author.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource (for updates and deletes).
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /***** User Profile Rules *****/

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @deny (create) User with UID 'user123' cannot create a profile with a different ID ('user456').
     * @allow (get) User with UID 'user123' can read their profile.
     * @deny (get) User with UID 'user456' cannot read user 'user123' profile.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /***** User Periods Rules *****/

    /**
     * @description Controls access to a user's menstrual cycle entries.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create) User with UID 'user123' can create a period entry under their profile.
     * @deny (create) User with UID 'user123' cannot create a period entry under another user's profile ('user456').
     * @allow (get) User with UID 'user123' can read a period entry under their profile.
     * @deny (get) User with UID 'user456' cannot read a period entry under user 'user123' profile.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/periods/{periodId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /***** User Daily Logs Rules *****/

    /**
     * @description Controls access to daily logs within a user's period entries.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create) User with UID 'user123' can create a daily log entry under their period.
     * @deny (create) User with UID 'user123' cannot create a daily log entry under another user's period ('user456').
     * @allow (get) User with UID 'user123' can read a daily log entry under their period.
     * @deny (get) User with UID 'user456' cannot read a daily log entry under user 'user123' period.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /***** User Stats Rules *****/

    /**
     * @description Controls access to user stats documents.
     * @path /users/{userId}/stats/{statId}
     * @allow (create) User with UID 'user123' can create their stats document.
     * @deny (create) User with UID 'user123' cannot create a stats document with a different ID ('user456').
     * @allow (get) User with UID 'user123' can read their stats document.
     * @deny (get) User with UID 'user456' cannot read user 'user123' stats document.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/stats/{statId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /***** Community Posts Rules *****/

    /**
     * @description Controls access to community post documents. Public read, owner-only writes.
     * @path /community_posts/{postId}
     * @allow (get) Any user can read a community post.
     * @allow (list) Any user can list community posts.
     * @allow (create) User with UID 'user123' can create a community post with authorId 'user123'.
     * @deny (create) User with UID 'user123' cannot create a community post with authorId 'user456'.
     * @allow (update) User with UID 'user123' can update their own community post.
     * @deny (update) User with UID 'user123' cannot update another user's community post.
     * @principle Public read with owner-only writes. Enforces document ownership for writes.
     */
    match /community_posts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(request.resource.data.authorId);
      allow delete: if isExistingOwner(request.resource.data.authorId);
    }
  }
}
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Unauthorized user attempts to create a profile with a mismatched ID.
     * @deny (get, list, update, delete) - Unauthorized user attempts to access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's menstrual cycle entries.
     * @path /users/{userId}/periods/{periodId}
     * @allow (create, get, list, update, delete) - Authenticated user manages their own period data.
     * @deny (create, get, list, update, delete) - Unauthorized user attempts to access another user's period data.
     * @principle Restricts access to a user's own period tracking data.
     */
    match /users/{userId}/periods/{periodId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to daily logs within a specific menstrual cycle.
     * @path /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId}
     * @allow (create, get, list, update, delete) - Authenticated user manages their own daily log data.
     * @deny (create, get, list, update, delete) - Unauthorized user attempts to access another user's daily log data.
     * @principle Restricts access to a user's own daily log data.
     */
    match /users/{userId}/periods/{periodId}/dailyLogs/{dailyLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user statistics documents.
     * @path /users/{userId}/stats/{statId}
     * @allow (create, get, list, update, delete) - Authenticated user manages their own stats data.
     * @deny (create, get, list, update, delete) - Unauthorized user attempts to access another user's stats data.
     * @principle Restricts access to a user's own computed statistics.
     */
    match /users/{userId}/stats/{statId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to community posts.
     * @path /community_posts/{postId}
     * @allow (get, list) - Any user can read community posts.
     * @allow (create) - Authenticated user can create a community post with matching authorId.
     * @allow (update, delete) - Only the original author can update or delete their post.
     * @deny (create) - Unauthorized user attempts to create a post with a mismatched authorId.
     * @deny (update, delete) - Unauthorized user attempts to modify another user's post.
     * @principle Allows public reads for community engagement but restricts writes to the author.
     */
    match /community_posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
        return isSignedIn() && resource.data.authorId == request.auth.uid && resource.data != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Controls access to a user's meal log entries.
     * @path /users/{userId}/mealLogs/{mealLogId}
     * @allow (create, get, list, update, delete) - Authenticated user manages their own meal log data.
     * @deny (create, get, list, update, delete) - Unauthorized user attempts to access another user's meal log data.
     * @principle Restricts access to a user's own meal log data.
     */
    match /users/{userId}/mealLogs/{mealLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}
'use server';

/**
 * @fileOverview An AI-powered chatbot that offers personalized advice and tips related to health, emotional well-being, and nutrition.
 *
 * - wellnessChatbotPersonalizedAdvice - A function that handles the chatbot interactions.
 * - WellnessChatbotPersonalizedAdviceInput - The input type for the wellnessChatbotPersonalizedAdvice function.
 * - WellnessChatbotPersonalizedAdviceOutput - The return type for the wellnessChatbotPersonalizedAdvice function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const WellnessChatbotPersonalizedAdviceInputSchema = z.object({
  topic: z.enum(['health', 'emotionalWellbeing', 'nutrition']).describe('The topic for which the user needs advice.'),
  query: z.string().describe('The user query for the chatbot.'),
  userProfile: z
    .object({
      interests: z.array(z.string()).optional().describe('The user interests.'),
      preferences: z.record(z.string(), z.any()).optional().describe('The user preferences.'),
    })
    .optional()
    .describe('The user profile and preferences.'),
});
export type WellnessChatbotPersonalizedAdviceInput = z.infer<
  typeof WellnessChatbotPersonalizedAdviceInputSchema
>;

const WellnessChatbotPersonalizedAdviceOutputSchema = z.object({
  advice: z.string().describe('The personalized advice generated by the chatbot.'),
});
export type WellnessChatbotPersonalizedAdviceOutput = z.infer<
  typeof WellnessChatbotPersonalizedAdviceOutputSchema
>;

export async function wellnessChatbotPersonalizedAdvice(
  input: WellnessChatbotPersonalizedAdviceInput
): Promise<WellnessChatbotPersonalizedAdviceOutput> {
  return wellnessChatbotPersonalizedAdviceFlow(input);
}

const prompt = ai.definePrompt({
  name: 'wellnessChatbotPersonalizedAdvicePrompt',
  input: {schema: WellnessChatbotPersonalizedAdviceInputSchema},
  output: {schema: WellnessChatbotPersonalizedAdviceOutputSchema},
  prompt: `You are a personalized AI assistant providing advice and tips related to the specified topic.

  Topic: {{{topic}}}
  User Query: {{{query}}}

  {{#if userProfile}}
  Based on the user profile:
  {{#if userProfile.interests}}
  Interests: {{userProfile.interests}}
  {{/if}}
  {{#if userProfile.preferences}}
  Preferences: {{userProfile.preferences}}
  {{/if}}
  {{/if}}

  Provide tailored guidance and support to the user. Focus on the user's query and topic and incorporate user information if available.
  Give short, clear and actionable advice.
  Respond in a friendly and supportive manner.
  `,
});

const wellnessChatbotPersonalizedAdviceFlow = ai.defineFlow(
  {
    name: 'wellnessChatbotPersonalizedAdviceFlow',
    inputSchema: WellnessChatbotPersonalizedAdviceInputSchema,
    outputSchema: WellnessChatbotPersonalizedAdviceOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
